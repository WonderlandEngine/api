#!/usr/bin/env node

import {readFile, writeFile} from 'node:fs/promises';
import {dirname, join} from 'node:path';
import {fileURLToPath} from 'node:url';

/* Remove experimental warning */
const emit = process.emit;
process.emit = function (name, data) {
    if (name === 'warning') {
        const msg = typeof data === 'string' ? data : data.name;
        if (msg?.includes('ExperimentalWarning')) {
            return false;
        }
    }
    return emit.apply(process, arguments);
};

/** This script's absolute path. */
const scriptPath = dirname(fileURLToPath(import.meta.url));

async function write(path, content) {
    try {
        await writeFile(path, content);
    } catch (e) {
        console.error(`Failed to write ${path}, reason:`, e);
        return false;
    }
    console.log(`[BUILD]: '${path}' overwritten`);
    return true;
}

const promises = []; /* All script promises to wait for before terminating */

/* Write package version into a TypeScript file.
 * The API can them use the version information at runtime. */

/* Matches regexp of the form: major.minor.patch[-rc.tag] */
const pkg = JSON.parse(await readFile(join(scriptPath, '../package.json')));

const version = pkg.version;
const matches = version.match(/([0-9]+).([0-9]+).([0-9]+)(?:-rc.([0-9]+))?/);
if (!matches || matches.length < 4) {
    console.error(`Invalid version '${input}'. Expected: major.minor.patch[-rc.x]`);
    process.exit(1);
}

const result = {
    major: Number.parseInt(matches[1]),
    minor: Number.parseInt(matches[2]),
    patch: Number.parseInt(matches[3]),
    rc: matches[4] !== undefined ? Number.parseInt(matches[4]) : 0
};

promises.push(write(join(scriptPath, '../src/version.ts'),`/**
 * This file is automatically generated.
 *
 * **Do not** modify this file directly, but instead update
 * the 'write-version.mjs' script.
 */

/**
 * Version type following a subset of the Semantic Versioning specification.
 */
export type Version = {major: number, minor: number, patch: number, rc: number};

/** Version of this API. */
export const APIVersion: Version = {
    major: ${result.major},
    minor: ${result.minor},
    patch: ${result.patch},
    rc: ${result.rc}
};
`));

const failed = (await Promise.all(promises)).includes(false);
process.exit(failed ? 1 : 0);
